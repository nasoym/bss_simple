#!/usr/bin/env bash

function upper() { echo "$@" | tr '[:lower:]' '[:upper:]'; }
function lower() { echo "$@" | tr '[:upper:]' '[:lower:]'; }

function parse_request() {
  read -r request_method request_uri request_http_version
  declare -gx request_method="$request_method"
  declare -gx request_uri="$request_uri"
  declare -gx request_http_version="$request_http_version"

  declare -gx request_header_lines=""
  while read -r line; do 
    line="$(echo "$line" | tr -d '\r')"
    request_header_lines+="$line
"
    [[ "$line" =~ ^$ ]] && { break; } 

    header_key="${line/%: */}"
    header_key="$(lower ${header_key//-/_} )"
    header_value="${line/#*: /}"
    declare -gx "request_header_${header_key}"="$header_value"
  done
 
  content_length="$(get_header_value "content-length" <<<"$request_header_lines")"
  if [[ -n "$content_length" ]] && [[ "$content_length" -gt "0" ]];then
    read -r -d '' -n "$content_length" request_content
  fi
  declare -gx request_content="$request_content"

  declare -gx request_path="${request_uri/%\?*/}"
  if [[ "${request_uri}" =~ \? ]]; then
    declare -gx request_queries="${request_uri#*\?}"
    for I in $(tr '&' '\n' <<<"$request_queries"); do
      query_key=${I//\=*/}
      [[ "${I}" =~ = ]] && query_value="$(urldecode ${I//*\=/})"
      declare -gx "request_query_${query_key}"="$query_value"
      declare -gx "${query_key}"="$query_value"
    done
  fi
}


#!/usr/bin/env bash

set -o errexit  # abort when any commands exits with error
set -o pipefail # abort when any command in a pipe exits with error
set -o nounset  # abort when any unset variable is used
set -o errtrace # inherits trap on ERR in function and subshell
set -f # prevent bash from expanding glob
trap 'echo status:$? line:$LINENO line:$BASH_LINENO command:"$BASH_COMMAND" functions:$(printf " %s" ${FUNCNAME[@]:-})' ERR

if [[ "${trace:=0}" -eq 1 ]];then
  PS4='${LINENO}: '
  set -x
  export trace
fi

self="$(dirname $(realpath $0))"

while getopts "p:c:s:" options; do case $options in
  s) socat_options="$OPTARG" ;;
  p) port="$OPTARG" ;;
  c) cgi_path="$OPTARG" ;;
esac; done; shift $(( OPTIND - 1 ))

: ${port:="8080"}
: ${socat_options:="-T60"}
: ${default_header_command:="defaultHeaders"}; export default_header_command

if [[ -z "${cgi_path:-""}" ]]; then
  if [[ -n "$@" ]] && [[ -d "$@" ]];then
    : ${cgi_path:="$@"}
  elif [[ -n "$@" ]] && [[ -d "$(pwd)/$@" ]];then
    : ${cgi_path:="$(pwd)/$@"}
  elif [[ -d "$(pwd)/cgi-bin" ]];then
    : ${cgi_path:="$(pwd)/cgi-bin"}
  elif [[ -d "${self}/cgi-bin" ]];then
    : ${cgi_path:="${self}/cgi-bin"}
  fi
fi
export cgi_path

function defaultHeaders() {
  echo "Date: $(date -u "+%a, %d %b %Y %T GMT")"
  echo "Expires: 0"
  echo "Connection: close"
  echo "Cache-Control: no-cache, no-store, must-revalidate"
  echo "Pragma: no-cache"
  echo "Access-Control-Allow-Origin: *"
}
export -f defaultHeaders

function script_failure() {
  echo "HTTP/1.0 500 Failure"
  ${default_header_command}
  printf "Content-type: text/plain; charset=iso-8859-1\n\n"
  printf "Script Failure\n"
  echo "${response}" | sed -e 's/^/stdout: /g'
  echo "${log_line} 500" >&2
  exit 0
}
export -f script_failure

function handle() {
  read -r REQUEST_METHOD REQUEST_URI SERVER_PROTOCOL
  export REQUEST_METHOD REQUEST_URI SERVER_PROTOCOL
  while read -r line; do 
    line="$(echo "$line" | tr -d '\r')"
    [[ "$line" =~ ^$ ]] && { break; } 
    header_key="${line/%: */}"
    header_key="$(tr '[:lower:]' '[:upper:]' <<<"${header_key//-/_}" )"
    header_value="${line/#*: /}"
    export HTTP_${header_key}="${header_value}"
  done
  export SCRIPT_NAME="${REQUEST_URI/%\?*/}"
  if [[ "${REQUEST_URI}" =~ \? ]]; then
    export QUERY_STRING="${REQUEST_URI#*\?}"
  fi
  local log_line="$(date +%FT%T) ${SOCAT_PEERADDR}:${SOCAT_PEERPORT} ${REQUEST_METHOD} ${REQUEST_URI} ${SCRIPT_NAME}"
  if [[ -x "${cgi_path}/${SCRIPT_NAME}" ]];then
    if [[ -n "${HTTP_CONTENT_LENGTH:-""}" ]] && [[ "${HTTP_CONTENT_LENGTH:-0}" -gt "0" ]];then
      read -r -d '' -n "${HTTP_CONTENT_LENGTH}" request_content
      response="$(echo "${request_content}" | ${cgi_path}/${SCRIPT_NAME})" || script_failure
    else
      response="$(${cgi_path}/${SCRIPT_NAME})" || script_failure
    fi
    echo "HTTP/1.0 200 OK"
    ${default_header_command}
    echo "${response}"
    echo "${log_line} 200" >&2
  elif [[ -f "${cgi_path}/${SCRIPT_NAME}" ]];then
    echo "HTTP/1.0 200 OK"
    ${default_header_command}
    echo ""
    cat ${cgi_path}/${SCRIPT_NAME}
    echo "${log_line} 200" >&2
  else
    echo "HTTP/1.0 404 Not Found"
    ${default_header_command}
    echo ""
    echo "${log_line} 404" >&2
  fi
}
export -f handle

socat ${socat_options} TCP-LISTEN:${port},reuseaddr,fork SYSTEM:handle

